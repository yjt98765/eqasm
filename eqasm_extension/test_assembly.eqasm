                  .register r9 x
                  .register r1 y
                  .def_sym  MOV_SMALL_CONSTANT 0x1234
                  .def_sym  MOV_LARGE_CONSTANT 0x12345678


                  NOP                       #a cycle
                  STOP

                  ADD        y, r2, r3      
                  SUB        r4, r5, r6     #sub


                  ADDC       y, r2, r3      
                  SUBC       r4, r5, r6     

                  AND        r7, r8, x      #logic and
                  OR         d, r11, r12  #logic or
                  XOR        r13, v, r15  #logic xor 
                  NOT        r16, r17       #logic not

                  CMP        r18, x       #compare r18,r19 then store the result into comparison flags.

                  BR         NE, forward_label  #if NE==1, jump to PC+offset 

                  LDI        r20, 0x2000    #load 0x2000'sdata to r20
                  LDUI       r21, 32767 ,r22    #


forward_label:    FBR        EQ, r22
                  FMR        r23, q3

backward_label:   SMIS       s5, {1, 4, 6}
                  SMIT       t5, {(3,1), (5,2)}

# Test encoding of a large T register address.
                  SMIT       t63, {(3,1), (5,2)}
                  BR         GT, backward_label

# Quantum single format instructions
                  QWAIT	     10     #Quantum Wait Immediate
                  QWAITR     to    #Quantum Wait Register

# Aliases
addr:
                  SHL1       r25,e
                  NAND       r27,r28,y
                  NOR        r30,r31,r0
                  XNOR       y,r2,r3

                  BRA        addr
                  GOTO       addr
                  BRN        addr
                  BEQ        r4, r5, addr
                  BNE        x, d, addr
		        　BLT	     r4, c, addr
		        　BLE	     r4, r5, addr
		        　BGT	     r4, r5, addr
		        　BGE	     r4, t, addr
		        　BLTU	     r4, r5, addr
		        　BLEU	     r4, r5, addr
		        　BGTU	     r4, r5, addr
		        　BGEU	     x, r5, addr

                  BR         EQZ, addr      #branch
                  BR         NEZ, addr      #branch
                  BR         LTZ, addr      #branch
                  BR         GEZ, addr      #branch
                  BR         CARRY, addr    #branch
                  BR         NOTCARRY, addr #branch

                  COPY       y,r7
                  MULT2      r8,x
                  MOV       r10, MOV_SMALL_CONSTANT
                  MOV       x, MOV_LARGE_CONSTANT

# Branch alias, forward label
                  BEQ        x, r5, br_alias_fwd
                  NOP
                  NOP
br_alias_fwd:     BRA        addr

# Quantum double format instructions (some).

world s9 | hello t2
abd t3
hello
abc r4

CW_01 s0
bs 2 CW_01 s0 | FLUX_01 s1
bs 3 CW_01 s0 | C,FLUX_01 s1 | CNOT t2
bs 4 QNOP | QNOP
bs 5 QNOP
bs 6 QNOP | CW_01 s3
bs 7 CW_01 s0 | FLUX_01 s1 | CNOT t63 | CW_01 s6

bs 7 CW_01 s0 | FLUX_01 s1
bs 0 CNOT t63 | CW_01 s6
bs 2 X100 s0 
# Alternative specification of BS

# Implicitly wait 1 quantum cycle before executing the bundle
# (of one quantum instruction).
cw_10 s2

# Start the specified bundle immediately.
0 cw_11 s3


# Wait 2 quantum cycles before executing the bundle
2 cw_11 s3

# Implicit quantum cycle wait specification (1), multi-instruction bundle.
cw_12 s5 | CNOT t3 | SWAP t4
